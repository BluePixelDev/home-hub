import {
  createContext,
  useContext,
  useEffect,
  useState,
  type ReactNode,
} from "react";
import { packU16, toSigned, toSigned32 } from "./util";

interface PowerServiceProps {
  solarProduction: number; // Power generated by solar panels
  householdUsage: number; // Power consumed by the household
  gridExport: number; // Power exported to the grid

  // Battery details
  battery: {
    totalCapacity: number; // Total battery capacity
    currentCharge: number; // Current battery charge level
  };
  heatPumpUsage?: number;
}

const initialValue: PowerServiceProps = {
  solarProduction: 0,
  householdUsage: 0,
  gridExport: 0,
  battery: {
    totalCapacity: 0,
    currentCharge: 0,
  },
  heatPumpUsage: 0,
};

const PowerContext = createContext(initialValue);
export const usePower = () => useContext(PowerContext);

export const PowerProvider = ({ children }: { children: ReactNode }) => {
  const [powerData, setPowerData] = useState<PowerServiceProps>(initialValue);

  const updatePowerData = async () => {
    try {
      const params = new URLSearchParams();
      params.append("optType", "ReadRealTimeData");
      params.append("pwd", import.meta.env.VITE_SOLAX_API_KEY);

      const res = await fetch("/solax", {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
        body: params.toString(),
      });

      if (!res.ok) {
        throw new Error(`Server returned status ${res.status}`);
      }

      const json = await res.json();
      const data: number[] = json.Data;

      const solarProduction = data[14] + data[15];
      const currentCharge = toSigned(data[41]);
      let gridExport = toSigned32(packU16([data[34], data[35]]));
      let householdUsage = -gridExport + solarProduction - currentCharge;

      const clamp = (value: number, min: number, max: number) =>
        Math.max(min, Math.min(max, value));

      gridExport = clamp(gridExport, -10000, 10000);
      householdUsage = clamp(householdUsage, -10000, 10000);

      setPowerData({
        solarProduction,
        battery: {
          currentCharge,
          totalCapacity: data[103],
        },
        gridExport,
        householdUsage,
      });
    } catch (error) {
      console.error("Failed to fetch power data:", error);
    }

    await new Promise((res) => setTimeout(res, 5000));
  };

  useEffect(() => {
    updatePowerData();
    const interval = setInterval(() => {
      updatePowerData();
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  return (
    <PowerContext.Provider value={powerData}>{children}</PowerContext.Provider>
  );
};
